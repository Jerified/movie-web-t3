// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "sqlite"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#String
  url      = env("DATABASE_URL")
}

// original_title: String
//   adult: boolean,
//   backdrop_path: String,
//   media_type: String,
//   original_language: String,
//   overview: String,
//   poster_path: String,
//   title: String,
//   release_date: String

model Movie {
  id            String   @id @default(cuid())
  movieId String
  imdb_id String?
  original_title String?
  adult Boolean?
  backdrop_path String?
  media_type String?
  original_language String?
  overview String?
  poster_path String?
  title String?
  release_date String?
  vote_average Int?
  vote_count Int?
  runtime Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId String
  // isFavorite Boolean @default(false)
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  // @@index([userId])
  @@unique([movieId, userId])
}

// model Genre {
//   id Int
//   name String
// }

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  username      String
  accounts      Account[]
  sessions      Session[]
  // favorites  Movie[]
  movie     Movie[]   
  // @relation("Watchlist")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
